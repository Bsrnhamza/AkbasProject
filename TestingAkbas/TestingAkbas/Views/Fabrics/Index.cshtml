@model IEnumerable<TestingAkbas.Models.Fabric>
@{ ViewData["Title"] = ""; }

@section Styles {
    <link rel="stylesheet" href="~/css/custom.css" />
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Döviz Bilgileri -->
<div class="currency-info-wrapper">
    <div class="currency-info">
        <p><strong>EURO:</strong> 34,7000 TL</p>
        <p><strong>USD:</strong> 32,5000 TL</p>
        <p><strong>GBP:</strong> 41,9100 TL</p>
        <p><strong>€/$:</strong> 1,0677</p>
        <p><strong>GBP/$:</strong> 1,2700</p>
    </div>
</div>

<table class="table table-hover" id="fabricTable">
    <thead>
        <tr>
            <th>Quality Class</th>
            <th>
                Fabric Code
                <div class="filter-section">
                    <label for="fabricCodeFilter" class="sr-only">Filter by Fabric Code</label>
                    <select id="fabricCodeFilter">
                        <option value="">All</option>
                        @foreach (var item in Model.Select(x => x.FabricCode).Distinct())
                        {
                            <option value="@item">@item</option>
}
                    </select>
                </div>
            </th>
            <th>Qualities</th>
            <th>
                Quality Name
                <div class="filter-section">
                    <label for="qualityNameFilter" class="sr-only">Filter by Quality Name</label>
                    <select id="qualityNameFilter">
                        <option value="">All</option>
                        @foreach (var item in Model.Select(x => x.QualityName).Distinct())
                        {
                            <option value="@item">@item</option>
}
                    </select>
                </div>
            </th>
            <th>
                Quality Group
                <div class="filter-section">
                    <label for="qualityGroupFilter" class="sr-only">Filter by Quality Group</label>
                    <select id="qualityGroupFilter">
                        <option value="">All</option>
                        @foreach (var item in Model.Select(x => x.QualityGroup).Distinct())
                        {
                            <option value="@item">@item</option>
}
                    </select>
                </div>
            </th>
            <th>Quality Composition</th>
            <th>Pattern Type</th>
            <th>Width</th>
            <th>Weight</th>
            <th>Raw Fabric Price</th>
            <th>Domestic Price</th>
            <th>Export Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr data-fabric-code="@item.FabricCode" data-quality-name="@item.QualityName" data-quality-group="@item.QualityGroup">
                <td class="@GetQualityClassCssClass(item.QualityClass)">
                    @Html.DisplayFor(modelItem => item.QualityClass)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.FabricCode)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.Qualities)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.QualityName)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.QualityGroup)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.QualityComposition)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.PatternType)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.Width)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.Weight)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.RawFabricPrice)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.DomesticPrice)
                </td>
                <td class="@GetQualitiesCssClass(item.Qualities)">
                    @Html.DisplayFor(modelItem => item.ExportPrice)
                </td>
                <td>
                    <div class="btn-group" role="group">
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning">Edit</a>
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info">Details</a>
                        <form asp-action="Delete" asp-route-id="@item.Id" onsubmit="return confirm('Are you sure you want to delete this item?');">
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    $(document).ready(function () {
        function filterTable() {
            var fabricCode = $('#fabricCodeFilter').val().toLowerCase();
            var qualityName = $('#qualityNameFilter').val().toLowerCase();
            var qualityGroup = $('#qualityGroupFilter').val().toLowerCase();

            $('#fabricTable tbody tr').each(function () {
                var row = $(this);
                var rowFabricCode = row.data('fabric-code').toLowerCase();
                var rowQualityName = row.data('quality-name').toLowerCase();
                var rowQualityGroup = row.data('quality-group').toLowerCase();

                if ((fabricCode === "" || rowFabricCode === fabricCode) &&
                    (qualityName === "" || rowQualityName === qualityName) &&
                    (qualityGroup === "" || rowQualityGroup === qualityGroup)) {
                    row.show();
                } else {
                    row.hide();
                }
            });
        }

        $('#fabricCodeFilter, #qualityNameFilter, #qualityGroupFilter').on('change', filterTable);
    });
</script>

@functions {
    public string GetQualityClassCssClass(string qualityClass)
    {
        switch (qualityClass?.ToLower())
        {
            case "viscose":
                return "quality-class-viscose";
            case "rayon":
            case "rynsignart":
                return "quality-class-rayon";
            case "cotton":
                return "quality-class-cotton";
            case "nylon":
                return "quality-class-nylon";
            case "polyester":
            case "pesdouble":
                return "quality-class-polyester";
            case "tencel":
            case "modal":
                return "quality-class-tencel";
            case "linen":
                return "quality-class-linen";
            case "jacquard":
                return "quality-class-jacquard";
            case "mix":
            case "yarndyed":
                return "quality-class-mix";
            default:
                return "";
        }
    }

    public string GetQualitiesCssClass(string qualities)
    {
        switch (qualities?.ToLower())
        {
            case "m":
                return "qualities-m";
            case "a":
                return "qualities-a";
            case "n":
                return "qualities-n";
            default:
                return "";
        }
    }
}
