@model IEnumerable<TestingAkbas.Models.Fabric>
@{ ViewData["Title"] = "";
    Layout = "_FabricsLayout"; }

@section Styles {
    <link rel="stylesheet" href="~/css/custom.css" />
}
<button type="button" id="exportButton" class="btn btn-outline-success ">Export to Excel</button>
<div class="currency-info-wrapper">
    <div class="currency-info">
        EURO: 34, 7000 TL&nbsp;&nbsp;&nbsp;&nbsp;USD: 32, 5000 TL&nbsp;&nbsp;&nbsp;&nbsp;GBP: 41, 9100 TL&nbsp;&nbsp;&nbsp;&nbsp;€/$: 1, 0677&nbsp;&nbsp;&nbsp;&nbsp;GBP/$: 1, 2700
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<table class="table table-hover" id="fabricTable">
    <thead>
        <tr>
            <th>Quality Class</th>
            <th>
                Fabric Code
                <div class="filter-section">
                    <label for="fabricCodeFilter" class="sr-only"></label>
                    <select id="fabricCodeFilter">
                        <option value="">All</option>
                        @foreach (var item in Model.Select(x => x.FabricCode).Distinct())
                        {
            <option value="@item">@item</option>}
                    </select>
                </div>
            </th>
            <th>Qualities</th>
            <th>
                Quality Name
                <div class="filter-section">
                    <label for="qualityNameFilter" class="sr-only"></label>
                    <select id="qualityNameFilter">
                        <option value="">All</option>
                        @foreach (var item in Model.Select(x => x.QualityName).Distinct())
                        {
            <option value="@item">@item</option>}
                    </select>
                </div>
            </th>
            <th>
                Quality Group
                <div class="filter-section">
                    <label for="qualityGroupFilter" class="sr-only"></label>
                    <select id="qualityGroupFilter">
                        <option value="">All</option>
                        @foreach (var item in Model.Select(x => x.QualityGroup).Distinct())
                        {
            <option value="@item">@item</option>}
                    </select>
                </div>
            </th>
            <th>Quality Composition</th>
            <th>Pattern Type</th>
            <th>
                Width
                <div class="filter-section">
                    <label for="minWidth" class="sr-only">Min Width</label>
                    <input type="number" id="minWidth" placeholder="Min"><br />
                    <label for="maxWidth" class="sr-only">Max Width</label>
                    <input type="number" id="maxWidth" placeholder="Max">
                </div>
            </th>
            <th>
                Weight
                <div class="filter-section">
                    <label for="minWeight" class="sr-only">Min Weight</label>
                    <input type="number" id="minWeight" placeholder="Min"><br />
                    <label for="maxWeight" class="sr-only">Max Weight</label>
                    <input type="number" id="maxWeight" placeholder="Max">
                </div>
            </th>
            <th>Raw Fabric Price</th>
            <th>Domestic Price</th>
            <th>Export Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
<tr data-fabric-code="@item.FabricCode" data-quality-name="@item.QualityName" data-quality-group="@item.QualityGroup">
    <td class="@GetQualityClassCssClass(item.QualityClass)">
        @Html.DisplayFor(modelItem => item.QualityClass)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.FabricCode)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.Qualities)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.QualityName)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.QualityGroup)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.QualityComposition)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.PatternType)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.Width)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.Weight)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.RawFabricPrice)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.DomesticPrice)
    </td>
    <td class="@GetQualitiesCssClass(item.Qualities)">
        @Html.DisplayFor(modelItem => item.ExportPrice)
    </td>
</tr>}
    </tbody>
</table>
<script>
    $(document).ready(function () {
        function filterTable() {
            var fabricCode = $('#fabricCodeFilter').val().toLowerCase();
            var qualityName = $('#qualityNameFilter').val().toLowerCase();
            var qualityGroup = $('#qualityGroupFilter').val().toLowerCase();
            var minWidth = parseFloat($('#minWidth').val()) || -Infinity;
            var maxWidth = parseFloat($('#maxWidth').val()) || Infinity;
            var minWeight = parseFloat($('#minWeight').val()) || -Infinity;
            var maxWeight = parseFloat($('#maxWeight').val()) || Infinity;

            $('#fabricTable tbody tr').each(function () {
                var row = $(this);
                var rowFabricCode = row.data('fabric-code').toLowerCase();
                var rowQualityName = row.data('quality-name').toLowerCase();
                var rowQualityGroup = row.data('quality-group').toLowerCase();
                var rowWidth = parseFloat(row.find('td').eq(7).text()) || 0;
                var rowWeight = parseFloat(row.find('td').eq(8).text()) || 0;

                var isWidthInRange = (rowWidth >= minWidth) && (rowWidth <= maxWidth);
                var isWeightInRange = (rowWeight >= minWeight) && (rowWeight <= maxWeight);

                if ((fabricCode === "" || rowFabricCode === fabricCode) &&
                    (qualityName === "" || rowQualityName === qualityName) &&
                    (qualityGroup === "" || rowQualityGroup === qualityGroup) &&
                    isWidthInRange &&
                    isWeightInRange) {
                    row.show();
                } else {
                    row.hide();
                }
            });
        }

        function updateColumnVisibility() {
            var filterType = $('input[name="filterType"]:checked').val();
            var exportPriceColIndex = 11; // 12. sütun (index 11)
            var domesticPriceColIndex = 10; // 11. sütun (index 10)

            // Başlıkların görünürlüğünü güncelle
            $('#fabricTable thead th').each(function (index) {
                if (filterType === 'Domestic') {
                    $(this).toggle(index !== exportPriceColIndex);
                } else if (filterType === 'Export') {
                    $(this).toggle(index !== domesticPriceColIndex);
                } else {
                    $(this).show(); // Her şey görünür
                }
            });

            // Hücrelerin görünürlüğünü güncelle
            $('#fabricTable tbody tr').each(function () {
                var row = $(this);
                row.find('td').each(function (index) {
                    if (filterType === 'Domestic') {
                        $(this).toggle(index !== exportPriceColIndex);
                    } else if (filterType === 'Export') {
                        $(this).toggle(index !== domesticPriceColIndex);
                    } else {
                        $(this).show(); // Her şey görünür
                    }
                });
            });
        }

        function exportVisibleDataToExcel() {
            var headers = [];
            var data = [];

            // Başlıkları topla
            $('#fabricTable thead th').each(function () {
                if ($(this).is(':visible')) {
                    headers.push($(this).text().trim());
                }
            });

            // Verileri topla
            $('#fabricTable tbody tr').each(function () {
                var row = $(this);
                if (row.is(':visible')) {
                    var rowData = [];
                    row.find('td').each(function () {
                        if ($(this).is(':visible')) {
                            rowData.push($(this).text().trim());
                        }
                    });
                    data.push(rowData);
                }
            });

            // Excel'e aktarma işlemi için AJAX isteği yap
            $.ajax({
                url: '/Fabrics/ExportVisibleToExcel',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ headers: headers, data: data }), // headers ekle
                xhrFields: {
                    responseType: 'blob'
                },
                success: function (response) {
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(response);
                    link.download = 'AkbasHoldingTable.xlsx';
                    link.click();
                },
                error: function () {
                    alert('Veri aktarımı sırasında bir hata oluştu');
                }
            });
        }

        // Olay dinleyicileri
        $('#fabricCodeFilter, #qualityNameFilter, #qualityGroupFilter, #minWidth, #maxWidth, #minWeight, #maxWeight').on('change', function () {
            filterTable();
            updateColumnVisibility();
        });

        $('input[name="filterType"]').on('change', function () {
            filterTable();
            updateColumnVisibility();
        });

        // Sayfa yüklendiğinde uygun sütunları göster/gizle
        filterTable();
        updateColumnVisibility();

        // Export to Excel butonuna tıklama olayını yakala
        $('#exportButton').on('click', function () {
            exportVisibleDataToExcel();
        });
    });
</script>

@functions { public string GetQualityClassCssClass(string qualityClass)
    {
        switch (qualityClass?.ToLower())
        {
            case "viscose":
                return "quality-class-viscose";
            case "rayon":
            case "rynsignart":
                return "quality-class-rayon";
            case "cotton":
                return "quality-class-cotton";
            case "nylon":
                return "quality-class-nylon";
            case "polyester":
            case "pesdouble":
                return "quality-class-polyester";
            case "tencel":
            case "modal":
                return "quality-class-tencel";
            case "linen":
                return "quality-class-linen";
            case "jacquard":
                return "quality-class-jacquard";
            case "mix":
            case "yarndyed":
                return "quality-class-mix";
            default:
                return "";
        }
    }

    public string GetQualitiesCssClass(string qualities)
    {
        switch (qualities?.ToLower())
        {
            case "m":
                return "qualities-m";
            case "a":
                return "qualities-a";
            case "n":
                return "qualities-n";
            default:
                return "";
        }
    } }